<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.luntan.base.login.dao.ILoginDao">
  <resultMap id="BaseResultMap" type="com.luntan.base.login.bo.Logininfo">
    <id column="USER_ID" jdbcType="VARCHAR" property="userId" />
    <result column="LOGIN_NAME" jdbcType="VARCHAR" property="loginName" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="latest_time" jdbcType="TIMESTAMP" property="latestTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    USER_ID, LOGIN_NAME, password, latest_time
  </sql>
  <select id="selectByExample" parameterType="com.luntan.base.login.bo.LogininfoExample">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from logininfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from logininfo
    where USER_ID = #{userId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from logininfo
    where USER_ID = #{userId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.luntan.base.login.bo.LogininfoExample">
    delete from logininfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.luntan.base.login.bo.Logininfo">
    insert into logininfo (USER_ID, LOGIN_NAME, password, 
      latest_time)
    values (#{userId,jdbcType=VARCHAR}, #{loginName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{latestTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.luntan.base.login.bo.Logininfo">
    insert into logininfo
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="loginName != null">
        LOGIN_NAME,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="latestTime != null">
        latest_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="loginName != null">
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="latestTime != null">
        #{latestTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.luntan.base.login.bo.LogininfoExample" resultType="java.lang.Long">
    select count(*) from logininfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update logininfo
    <set>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.loginName != null">
        LOGIN_NAME = #{record.loginName,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.latestTime != null">
        latest_time = #{record.latestTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update logininfo
    set USER_ID = #{record.userId,jdbcType=VARCHAR},
      LOGIN_NAME = #{record.loginName,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      latest_time = #{record.latestTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.luntan.base.login.bo.Logininfo">
    update logininfo
    <set>
      <if test="loginName != null">
        LOGIN_NAME = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="latestTime != null">
        latest_time = #{latestTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where USER_ID = #{userId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.luntan.base.login.bo.Logininfo">
    update logininfo
    set LOGIN_NAME = #{loginName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      latest_time = #{latestTime,jdbcType=TIMESTAMP}
    where USER_ID = #{userId,jdbcType=VARCHAR}
  </update>
  <!-- sql 映射  自己写 -->
  <select 
  <!-- id  必须配置 是命名空间的唯一标识，可以用来代表这条sql语句，一个命名空间对应一个 dao的接口（方法），
  	这个id 也对应dao里面的某个方法（相当于方法的实现），因此id 应与方法名一致
   -->
  id="login"
  <!-- parameterType   可选配置，默认为mybatis 自动处理
  	将要传入语句的参数完全限定类名或别名，如果不配置，mybatis 会通过parameterHandler 根据参数类型选择默认的
  	typeHandler进行处理
  	parameterType  主要指定参数类型 主要有 int short  long string 或者对象
  -->
  parameterType="com.luntan.base.login.bo.User"
  <!-- resultType 与resultMap   二选一    前者指定返回可以是基本类型，也可以是bean
    resultMap  返回 我们用resultMap 标签定义的映射类型，也是mybatis 高级映射的关键
   -->
  resultType="hashMap"
  <!-- flushCache  可选配置   如过设置为true ，任何时候只要语句被调用，将会导致本地缓存和二级缓存都被清空-->
  flushCashe="false"
  >
  
  </select>
  
</mapper>